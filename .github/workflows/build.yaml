name: "publish"

on:
  push:
    branches:
      - test_release

# This is the example for publishing a Universal macOS app with a signing certificate.
# On each push to the `release` branch it will create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # for ARM64 macOS builds (Apple Silicon only)
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "rust-cache"
          shared-key: ${{ matrix.platform }}
          workspaces: "./src-tauri -> target"

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      - name: import Apple Developer Certificate
        # Prevents keychain from locking automatically for 3600 seconds.
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: verify certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features native-tls,sqlite

      - name: Setup Apple API Key for notarization
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY_PATH }}
        run: |
          mkdir -p ~/private_keys
          echo "$APPLE_API_KEY" | base64 --decode > ~/private_keys/AuthKey.p8
          echo "Created API key file at ~/private_keys/AuthKey.p8"

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: build and publish
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_PATH: ~/private_keys/AuthKey.p8
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_RELEASE: ${{ env.VERSION }}
          VITE_SUPABASE_URL: https://wnwyftlrmrtfkshyenlc.supabase.co
          VITE_SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Indud3lmdGxybXJ0ZmtzaHllbmxjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzgyNTI3NzQsImV4cCI6MjA1MzgyODc3NH0.4s8uVgcU8MHOZIppT89qsgxIu_WsAWY0aOxgEUkv2eQ
          VITE_GOOGLE_REDIRECT: https://ebb.cool/auth-success
          VITE_SPOTIFY_CLIENT_ID: 0a9880c412a44cef9a8dc460479dcc92
          VITE_SPOTIFY_CLIENT_SECRET: 1f2f2f532dc34d1783454a4dffbe1f57
          VITE_PUBLIC_POSTHOG_KEY: phc_x7r5tfRz3GLFzxKcQfwBtUPXApOPgLbG1nYHIsL60aN
          VITE_PUBLIC_POSTHOG_HOST: https://us.i.posthog.com
        with:
          tagName: v__VERSION__
          releaseName: "v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          includeUpdaterJson: true
          includeDebug: true
